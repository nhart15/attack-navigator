---
id: ENGAGE
name: Engage Navigator
version: 1.0.0
approaches:
- EAP0003
- id: EAP0004
  name: Direct
  object-type: approach
  description: "Encourage or discourage the adversary from conducting their operation\
    \ as intended.\n\nDirection activities focus on moving the adversary towards or\
    \ away from an intended path. \nThis forced direction can be accomplished by removing\
    \ or disabling some resources, while \nadding or enabling others. The defender\
    \ can add lures or otherwise manipulate the environment \nto attempt to elicit\
    \ specific responses from the adversary. Additionally, the defender can \ntighten\
    \ some security controls while leaving others overly permissive or weakened. Finally,\n\
    the defender can physically move the adversary by moving threats from their intended\
    \ environment \nand into a safe engagement environment. For example, a suspicious\
    \ email attachment can be moved \nfrom the intended target to an engagement environment\
    \ for analysis. No matter how the direction \nis achieved, the defender hopes\
    \ to force the adversary to take unintended actions or stop intended actions.\n"
- id: EAP0005
  name: Disrupt
  object-type: approach
  description: "Impair an adversary's ability to conduct their operation as intended.\n\
    \nDisruption activities are used to stop or discourage an adversary from conducting\
    \ part \nor all of their mission. This disruption may increase the time, skills,\
    \ or resources\nneeded for the adversary to accomplish a specific task. For example,\
    \ a defender may \ndegrade network speeds as the adversary attempts to exfiltrate\
    \ large blocks of data.\nAsa second example, the defender may manipulate the output\
    \ of commonly used discovery\ncommands to show targets that do not exist or to\
    \ hide real targets. In either case, \nthe adversary may waste resources acting\
    \ on partial or falsified data. Disruptions \nmay also include planting misinformation\
    \ designed to influence the adversary's \ndecision-makers to make the wrong decisions\
    \ or to waste resources.\n"
activities:
- id: EAC0019
  name: Baseline
  object-type: activity
  description: "Identify key system elements to establish a baseline and be prepared\
    \ to reset a system to that baseline when necessary.\n\nTo determine the system\
    \ Baseline, the defender must identify software and configuration elements that\
    \ are critical to a set of objectives. \nThe defender must define the proper values\
    \ and be prepared to reset a running system to its intended state. Reverting to\
    \ a Baseline \nconfiguration can be essential when restoring an operational environment\
    \ to a safe state or when looking to impose a cost on adversaries\nby preventing\
    \ their activity. For example, the defender can watch for an adversary to make\
    \ changes in the environment and then revert\nthe environment with the goal of\
    \ either forcing the adversary to target elsewhere in the network or to display\
    \ a new, possibly more advanced, TTP.\nThe Baseline values will also be crucial\
    \ post-operation when analyzing changes to the environment over time.\n"
  approaches:
  - EAP0003
- id: EAC0017
  name: Hardware Manipulation
  object-type: activity
  description: "Alter the hardware configuration of a system to limit what an adversary\
    \ can do with the device.\n\nHardware Manipulation can include physical adjustments\
    \ or configuration changes to the hardware \nin the environment. This manipulation\
    \ can include physically removing a system's microphone, \ncamera, on-board Wi-Fi\
    \ adapter, etc. or using software controls to disable those devices. \nThese types\
    \ of manipulations can affect the adversary's ability to achieve their operational\
    \ objectives\nby incurring an increased resource cost, forcing them to change\
    \ approaches, or stopping them altogether. \nHardware Manipulation is often required\
    \ to maintain operational safety. For example, if the operation \nincludes Malware\
    \ Detonation using a laptop physically located in a shared space, it is likely\
    \ that the\ndefender will not have the ability to hide the legitimate conversations\
    \ and individuals present in the space. \nUnless the defender can control the\
    \ background sounds and visuals, it is likely too risky to leave the camera\n\
    and microphone connected to the machine.\n"
  approaches:
  - EAP0003
- id: EAC0020
  name: Isolation
  object-type: activity
  description: "Configure devices, systems, networks, etc. to contain activity and\
    \ data, thus preventing the expansion of an engagement beyond desired limits.\n\
    \nUsing Isolation, a defender can limit the effectiveness and scope of malicious\
    \ activity and/or lower exposure to unintended risks. \nWhen a system or resource\
    \ is isolated, a defender can observe adversary behaviors or tools with limited,\
    \ or no, lateral movement allowed.\nFor example, a defender may detonate a piece\
    \ of malware on an isolated system to perform dynamic analysis without risk to\
    \ other network \nresources. Determining which systems should be isolated in an\
    \ operation is a critical decision when calculating acceptable operational \n\
    risk. However, if the adversary expects to find an entire corporate network but\
    \ instead finds only an isolated system, they may not be\ninterested in engaging\
    \ with the target. Balancing acceptable risk, believability, and operational objectives\
    \ is essential when determining\nif or when a system should be isolated.\n"
  approaches:
  - EAP0003
  - EAP0005
- id: EAC0016
  name: Netowrk Manipulation
  object-type: activity
  description: "Make changes to network properties and functions to achieve a desired\
    \ effect.\n\nNetwork Manipulation allows a defender to throttle network speeds,\
    \ segment the network, \nmaintain a unique IP addressing scheme, add a kill switch\
    \ to cut off network access, etc. \nThese types of manipulations can affect the\
    \ adversary's ability to achieve their operational \nobjectives by incurring an\
    \ increased resource cost, forcing them to change approaches, or stopping \nthem\
    \ altogether. For example, a defender can limit the allowed ports or network requests\
    \ to force\nthe adversary to alter their planned C2 or exfiltration channels.\
    \ As another example, a defender\ncould allow or deny outbound SMB requests from\
    \ a network to affect the success of forced authentication.\nAdditionally, the\
    \ defender can degrade network speeds and reliability to impose a resource cost\
    \ as \nadversaries exfiltrate large quantities of data. Finally, a defender can\
    \ block primary C2 domains and\nIPs to determine if the adversary has additional\
    \ infrastructure. While there are a range of network manipulation options,\nin\
    \ all cases, the defender has an opportunity to learn about or influence the adversaries\
    \ operating in the environment.\n"
  approaches:
  - EAP0003
  - EAP0004
  - EAP0005
- id: EAC0018
  name: Security Controls
  object-type: activity
  description: "Alter security controls to make the system more or less vulnerable\
    \ to attack.\n\nManipulating Security Controls involves making configuration changes\
    \ to a system's security \nsettings including modifying Group Policies, disabling/enabling\
    \ autorun for removable media, \ntightening or relaxing system firewalls, etc.\
    \ Such security controls can be tightened to dissuade\nor prevent adversary activity.\
    \ Conversely, security controls can be weakened or left overly \npermissive to\
    \ encourage or enable adversary activity. Tightening security controls can typically\n\
    be done by implementing any of the mitigations described in MITRE ATT&CK. See\
    \ https://attack.mitre.org/mitigations/enterprise/ \nfor a full list of mitigation\
    \ strategies. While loosening security controls may seem obvious \n(i.e., simply\
    \ don't employ a given mitigation strategy), there is an additional level of nuance\
    \ that must be considered. \nSome security controls are considered so routine\
    \ that its absence may be suspicious. For example, completely turning \noff Windows\
    \ Defender would likely raise the adversary's suspicion. However, it is possible\
    \ to turn off Windows Defender \nin certain shared drives to encourage adversary\
    \ activity in predetermined locations. Therefore, it will likely be far \nless\
    \ suspicious to turn off Windows Defender in a single directory or share. When\
    \ assessing the likelihood that removing\na given security control is overly suspicious,\
    \ it is important to consider how prevalent that security control is,\nthe target\
    \ adversary's sophistication, and the engagement narrative.\n"
  approaches:
  - EAP0003
  - EAP0004
- id: EAC0021
  name: Attack Vector Migration
  object-type: activity
  description: "Move a malicious link, file, or device from its intended location\
    \ to an engagement system or network for execution/use.\n\nWhen a defender Migrates\
    \ an Attack Vector, the defender intercepts a malicious element and moves it to\
    \ a safe environment,\nsuch as a decoy system within a decoy network, for continued\
    \ engagement or analysis. A defender may choose to \nAttack Vector Migrations,\
    \ which may appear in the form of phishing emails, suspicious email attachments,\
    \ or malicious USBs. \nFor example, a defender might move a suspicious attachment\
    \ from a corporate inbox to an inbox on a system that, while in the\ncorporate\
    \ IP space, is completely segmented from the enterprise network. This segregated\
    \ environment will allow the adversary\nto move laterally throughout the environment\
    \ without risk to enterprise resources. Determining when an engagement should\
    \ be\nmoved to an engagement environment is a critical decision when calculating\
    \ acceptable operational risk. However, if the\nadversary sent a custom malware\
    \ sample to a phishing victim, but ultimately find themselves on an unrelated\
    \ victim, they\nmay be suspicious. Balancing this acceptable risk, believability,\
    \ and operational goals is essential when determining\nif or when to migrate an\
    \ attack vector.\n"
  approaches:
  - EAP0004
- id: EAC0009
  name: Email Manipulation
  object-type: activity
  description: "Modify the flow of email in the environment.\n\nEmail Manipulation\
    \ covers the various ways email flows in the environment can be affected.\nEmail\
    \ Manipulation can affect which mail appliances process mail flows, where mail\
    \ is forwarded,\nor what mail is present in an inbox. A common use case for email\
    \ manipulation is as a vector to \nintroduce malware into the engagement environment.\
    \ Suspicious emails may be removed from production\nmailbox and placed into an\
    \ inbox in an engagement environment. Then, any suspicious attachments\nor links\
    \ could be detonated from within the environment. As another example, emails collected\
    \ over\na long period of time from a legitimate inbox outside the environment\
    \ may be moved into the environment\nto reassure the adversary of the environment's\
    \ legitimacy by creating a mailbox that more closely\nresembles a real, lived-in\
    \ inbox.\n"
  approaches:
  - EAP0004
- id: EAC0023
  name: Introduced Vulnerabilities
  object-type: activity
  description: "Intentionally introduce vulnerabilities into the environment for the\
    \ adversary to exploit.\n\nBy intentionally Introducing Vulnerabilities into the\
    \ engagement environment, the defender can \nattempt to motivate the adversary\
    \ to target specific resources. This targeting may serve to move\nthe adversary\
    \ towards a particular resource, or away from another resource. At other times,\
    \ the\ndefender may Introduce Vulnerabilities as a mean of encouraging the adversary\
    \ to reveal targeting\npreferences, available capabilities, or even to influence\
    \ future targeting decisions. The operational\nobjectives will drive how and why\
    \ the defender Introduces Vulnerabilities in the engagement environment.\n"
  approaches:
  - EAP0004
- id: EAC0005
  name: Lures
  object-type: activity
  description: "Deceptive systems and artifacts intended to serve as decoys, breadcrumbs,\
    \ or bait to elicit a specific response from the adversary.\n\nLures are intended\
    \ to elicit a particular response from the adversary. For example, the defender\
    \ may utilize Lures to enable or \nblock the adversary's intended actions or encourage\
    \ or discourage a specific action or response. Lures can take a variety of forms\n\
    including credentials, accounts, files/directories, browser extensions/bookmarks,\
    \ system processes, etc. Regardless of form, Lures\nprovide opportunities to the\
    \ defender to drive adversary behavior in ways that align with operational outcomes.\n"
  approaches:
  - EAP0004
  - EAP0005
- id: EAC0013
  name: Malware Detonation
  object-type: activity
  description: "Execute malware under controlled conditions to analyze its functionality.\n\
    \nMalware can be detonated in a controlled and safe environment. Clear goals \n\
    and safety procedures should always be established before detonation to ensure\n\
    that the operation is focused and safe. The malware can be detonated in an \n\
    execution environment ranging from a somewhat sterile commercial malware execution\
    \ \nappliance to a bespoke engagement environment crafted to support an extended\
    \ engagement.\nDepending on operational objectives, the outcome of a malware detonation\
    \ operation can include: \ncollecting new IOCs during dynamic analysis, observing\
    \ additional TTPs by detonating the malware in a \ntarget rich environment, and/or\
    \ negatively impacting the adversary and their operation.\n"
  approaches:
  - EAP0004
- id: EAC0010
  name: Peripheral Management
  object-type: activity
  description: "Manage peripheral devices used on systems within the network for engagement\
    \ purposes.\n\nPeripheral Management is the administration of peripheral devices\
    \ used on systems within \nthe engagement environment. A defender can choose to\
    \ allow or deny certain types of peripherals\nfrom being used on systems to either\
    \ motivate or demotivate adversary activity or to direct the\nadversary towards\
    \ specific targets. Defenders can also introduce peripherals to an adversary-controlled\n\
    system to see how the adversary reacts. For example, the defender can introduce\
    \ external Wi-Fi adapters,\nUSB devices, etc. to determine if adversaries attempt\
    \ to use them for exfiltration purposes.\nAdditionally, peripherals provide an\
    \ avenue for the defender to present new or additional information\nto the adversary.\
    \ This information can be used to introduce an additional attack surface, motivate\
    \ or\ndemotivate adversary activity, or to further the deception story. For example,\
    \ the defender may \ninclude data on a connected USB device or stage an important\
    \ conversation near an externally connected\ncamera or microphone. Depending on\
    \ the contents of this data, the adversary may be encouraged to take \na specific\
    \ action and/or reassured about the legitimacy of the environment.\n"
  approaches:
  - EAP0004
- id: EAC0014
  name: Software Manipulation
  object-type: activity
  description: "Make changes to a system's software properties and functions to achieve\
    \ a desired effect.\n\nSoftware Manipulation allows a defender to alter or replace\
    \ elements of the OS, file system, or other software installed and executed on\
    \ a system. These alterations can \naffect outputs, degrade effectiveness, and/or\
    \ prevent the software from functioning altogether. For example, the defender\
    \ can manipulate software by changing the output of \ncommonly used discovery\
    \ commands to hide legitimate systems and artifacts and/or reveal deceptive artifacts\
    \ and systems. Alternatively, the defender can change the output \nof the password\
    \ policy description for an adversary attempting to brute-force credentials. This\
    \ manipulation may cause the adversary to waste resources brute-forcing \npasswords\
    \ with inaccurate complexity requirements. If the defender wanted to degrade software\
    \ effectiveness, they might weaken algorithms to expose data that is being \n\
    archived, encoded, and/or encrypted. Finally, to prevent software from functioning\
    \ altogether, the defender may cause failures in software typically used to delete\
    \ data or \nhide adversary artifacts. For some Software Manipulation use cases,\
    \ it may be possible to make changes in such a way that adversary actions and\
    \ legitimate user actions are \nhandled differently. For example, the defender\
    \ could show all files when viewed in a graphical application but hide files or\
    \ introduce decoy files when viewed via a \nterminal command. This setup would\
    \ allow legitimate users full access to the file system, while manipulating access\
    \ for adversaries using a reverse shell.\n"
  approaches:
  - EAP0004
  - EAP0005
